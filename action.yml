name: "Add Issue to Project"
author: 'Tetsuya Mori'
description: 'Add GitHub Issues to GitHub Projects (Beta)'
branding:
  icon: plus-square
  color: green
inputs:
  github-token:
    default: ''
    required: true
    description: 'Personal Access Token that with `repo` and `org:read` is granted.'
  project-id:
    default: ''
    required: false
    description: 'Node Id of project.'
  project-owner:
    default: ''
    required: false
    description: 'User/Organization name project contains.'
  project-number:
    default: 0
    required: false
    description: 'The number of the target project.'
  issue-id:
    default: ''
    required: false
    description: 'Node Id of issue.'
  issue-repository:
    default: ''
    required: false
    description: 'Repository name with owner of issue.'
  issue-number:
    default: 0
    required: false
    description: 'Number of issue.'
outputs:
  added-project-item-id:
    description: 'Project Item Id that added to project.'
    value: ${{ steps.add-issue-to-project.outputs.added-project-item-id }}
  error:
    description: 'Error message.'
    value: ${{ steps.add-issue-to-project.outputs.error }}
runs:
  using: "composite"
  steps:
    - uses: monry/actions-get-project-id@v2
      id: get-project-id
      if: inputs.project-id == ''
      with:
        github-token: ${{ inputs.github-token }}
        project-owner: ${{ inputs.project-owner }}
        project-number: ${{ inputs.project-number }}
    - name: Output Error
      run: echo ${{ steps.get-project-id.outputs.error }}
    - uses: monry/actions-get-issue-id@v1
      id: get-issue-id
      if: inputs.issue-id == ''
      with:
        github-token: ${{ inputs.github-token }}
        issue-repository: ${{ inputs.issue-repository }}
        issue-number: ${{ inputs.issue-number }}
    - name: Add Issue to Project
      uses: actions/github-script@v6
      id: add-issue-to-project
      with:
        result-encoding: string
        github-token: ${{ inputs.github-token }}
        script: |
          var projectId = '${{ inputs.project-id }}' || '${{ steps.get-project-id.outputs.project-id }}';
          if (!projectId) {
            core.setOutput('error', 'Project does not found.');
            return;
          }
          var issueId = '${{ inputs.issue-id }}' || '${{ steps.get-issue-id.outputs.issue-id }}';
          if (!issueId) {
            core.setOutput('error', 'Issue does not found.');
            return;
          }

          const variables = {
            projectId: projectId,
            issueId: issueId
          };
          const mutation = `
            mutation($projectId: ID!, $issueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                item {
                  id
                }
              }
            }
          `;

          let addedProjectV2ItemId = null;
          try {
            var result = await github.graphql(mutation, variables);
            if (result && result.addProjectV2ItemById && result.addProjectV2ItemById.item) {
              addedProjectV2ItemId = result.addProjectV2ItemById.item.id;
            }
          } catch (error) {
            if (error.errors && error.errors.length > 0) {
              core.setOutput('error', error.errors[0].message);
              return;
            }
          }

          core.setOutput('added-project-item-id', addedProjectV2ItemId);
          return;
